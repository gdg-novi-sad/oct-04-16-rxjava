<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Android-RxJava</string>
    <string name="hello_world">Hello world!</string>
    <string name="action_settings">Settings</string>
    <!-- InsertYouroAuthTokenHere -->
    <string name="github_oauth_token"></string>

    <string name="btn_demo_schedulers">schedulers &amp; concurrency</string>
    <string name="btn_demo_buffer">accumulate calls (buffer)</string>
    <string name="btn_demo_debounce">search text listener(debounce)</string>
    <string name="btn_demo_retrofit">Retrofit + RxJava</string>
    <string name="btn_demo_double_binding_textview">Double binding (PublishSubject)</string>
    <string name="btn_demo_polling">Polling with RxJava</string>
    <string name="btn_demo_form_validation_combinel">Form Validation with CombineLatest</string>
    <string name="msg_demo_concurrency_schedulers">This is a demo of how long running operations can be offloaded to a background thread. After the operation is done, we resume back on the main thread. All using RxJava.</string>
    <string name="msg_demo_debounce">As you type in the input box, it will not shoot out log messages at every single input character change, but rather only pick the last one.</string>
    <string name="msg_demo_timeout">This is a demo of terminating events, that take too long to process. Events in this demo should timeout in 3 seconds. Button 1 is an event that takes 2s to process, and Button 2 is a n event that takes 5s to process. Hit Button 2, and see in the logs that it\'s been cancelled, while this is not the case for Button 1.</string>
    <string name="msg_demo_retrofit">Retrofit from Square is a super easy networking helper library. It works really well with RxJava and these are examples taken from Jake Wharton\'s talk at Netflix (see README). Really the only interesting bits here are in the code and logs.</string>
    <string name="msg_demo_doublebinding">Watch how the result gloriously auto-updates <ba></ba>sed on your changing inputs. Using a technique like this, you could achieve the two-way binding in Angular Js, or more efficiently use a pattern like the Presentation View Model.</string>
    <string name="msg_demo_polling">Demo polling or making a call repeatedly with RxJava.\n\nSimple polling: Notice in the logs how a (simulated) network call is repeatedly made in the background.</string>
    <string name="demo_title">GDG NS RxJava meetup demo examples</string>
</resources>
